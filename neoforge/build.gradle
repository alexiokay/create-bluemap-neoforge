plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    neoForge {
        // No mixin config needed as we're not using mixins
    }
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

repositories {
    // NeoForge maven repository
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.ithundxr.dev/snapshots" } // Registrate
    // KotlinForForge (needed by Fzzy Config)
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    // Create and its dependencies - using official documentation format
    modImplementation("com.simibubi.create:create-$minecraft_version:$create_neoforge_version:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-NeoForge-$minecraft_version:$ponder_neoforge_version")
    compileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-$minecraft_version:$flywheel_neoforge_version")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-$minecraft_version:$flywheel_neoforge_version")
    modImplementation("com.tterrag.registrate:Registrate:$registrate_neoforge_version")

    // Fzzy Config for NeoForge
    modImplementation "me.fzzyhmstrs:fzzy_config:$fzzy_config_neoforge_version"

    // BlueMap
    modLocalRuntime "maven.modrinth:bluemap:5.7-neoforge-1.21"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}